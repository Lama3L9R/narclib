#include "archash/archash.h"
#include <cstring>
#include "mem.h"

namespace narchook::archash {


    static unsigned char hcst[] = {0x04,0x07,0x01,0x0D,0x15,0x25,0x44,0x06,0x03,0x09,0x1D,0x35,0x64,0x47,0x00,0x0F,0x11,0x2D,0x54,0x26,0x42,0x0A,0x1B,0x39,0x7C,0x77,0x61,0x4D,0x14,0x27,0x40,0x0E,0x13,0x29,0x5C,0x36,0x62,0x4B,0x18,0x3F,0x70,0x6F,0x51,0x2C,0x56,0x22,0x4A,0x1A,0x3B,0x78,0x7F,0x71,0x6D,0x55,0x24,0x46,0x02,0x0B,0x19,0x3D,0x74,0x67,0x41,0x0C,0x17,0x21,0x4C,0x16,0x23,0x48,0x1E,0x33,0x68,0x5F,0x30,0x6E,0x53,0x28,0x5E,0x32,0x6A,0x5B,0x38,0x7E,0x73,0x69,0x5D,0x34,0x66,0x43,0x08,0x1F,0x31,0x6C,0x57,0x20,0x4E,0x12,0x2B,0x58,0x3E,0x72,0x6B,0x59};
    static unsigned char salt[32];

    EncryptedAPI void sponge(uint96_t* raw, uint96_t** result) {
        size_t len = 6 * sizeof (uint96_t);
        uint96_t* buff = (uint96_t*) narchook::mem::alloc(len);
        memcpy(buff, raw, len);

        for (size_t i = 0; i < 104; i++) {
            buff[0].low ^= hcst(i);
            buff[3] = u96_xor(u96_not(buff[5]), buff[0]);
            buff[2] = u96_xor(u96_or(buff[1], buff[4]), buff[3]);
            buff[4] = u96_xor(u96_and(buff[1], u96_not(buff[0])), buff[4]);
            buff[0] = u96_and(buff[3], buff[4]);
            buff[3] = u96_xor(buff[1], buff[5]);
            buff[0] = u96_xor(buff[0], buff[3]);
            buff[3] = u96_xor(u96_and(buff[2], buff[3]), buff[4]);
            buff[4] = u96_xor(buff[4], buff[5]);

            buff[5] = u96_rtol(buff[4], 55);
            buff[4] = u96_rtol(buff[2], 8);
            buff[1] = u96_rtol(buff[3], 1);
        }

        (*result) = buff;
        
    }

    EncryptedAPI void hash(char* raw, size_t len, char** result) {
        // todo
    }

}